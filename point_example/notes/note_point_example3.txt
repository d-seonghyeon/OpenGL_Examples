**삼각형 만들기**

1. 정점 입력

	1) 정점 데이터 준비
	2) vertex buffer object(VBO) 준비
	3) vertex buffer object에 정점 데이터 입력
		cpu memory 상에 있는 정점 데이터를 gpu에 옮기는 작업
	4)vertex array object(VAO) 준비
		우리의 정점 데이터의 구조를 알려주는 descriptor object
	5)program, VBO, VAO를 사용하여 그림 그리기


*vertex buffer object(VBO)

	정점 데이터를 담은 버퍼 오브젝트
	정점에 대한 다양한 데이터를 GPU가 접근 가능한 메모리에 저장해둔다.

	ex)position, normal, tangent, color, texture coordinate


	*함수 설명
	
	glGenBUffers(): 새로운 buffer object를 만든다.
	glBindBuffer(): 지금부터 사용할 buffer object를 지정한다.

		GL_ARRAY_BUFFER: 사용할 buffer object는 vertex data를 저장할 용도임을 알려줌

	glBufferData(): 지정된 buffer에 데이터를 복사한다.

		데이터의 총 크기, 데이터 포인터, 용도를 지정

		용도는 "STATIC | DYNAMIC | STREAM", "DRAW | COPY | READ"의 조합

		*flag 설명		
		
		STATIC: 딱 한번만 세팅되고 앞으로 계속 쓸 예정
		DYNAMIC: 앞으로 데이터가 자주 바뀔 예정
		STREAM: 딱 한번만 세팅되고 몇번 쓰다가 버려질 예정

		-용도에 맞는 flag 지정해야 효율 up


		ex) GL_DYNAMIC_DRAW, GL_STREAM_DRAW, GL_STATIC_READ 등등, 9가지 조합


		ex) glBufferData(GL_ARRAY_BUFFER, sizeof(float)*9,vertices,GL_STATIC_DRAW);




*vertex array object(VAO)

	정점 데이터 구조를 알려주는 오브젝트

	각 정점은 몇 byte로 구성되어 있는가?

	두 정점은 몇 byte만큼 떨어져 있는가?

	정점의 0번째 데이터는 어떤 사이즈의 데이터가 몇개 있는 형태인가?




	*함수 설명

	glGenVertexArrays(): VAO 생성
	glBindVertexArray(): 지금부터 사용할 VAO 설정
	glEnableVertexAttribArray(n): 정점 attribute 중 n번째를 사용하도록 설정


	glVertexAttribPointer(n,size,type,normalized,stride,offset)

		n: 정점의 n번째 attribue
		size: 해당 attribute는 몇개의 값으로 구성되어 있는가?
		type: 해당 attribute 데이터 타입
		normalized: 0~1사이 값인가
		stride: 두 정점간의 간격(byte 단위)
		offset: 첫 정점의 해당 attribute까지의 간격(byte)



	*순서 주의

	VAO binding
	VBO binding

	Vertex attribute setting
	Vertex attribute 설정하기 전에 VBO가 바인딩 되어있을 것



*Draw array

	*함수 설명
	
	glDrawArray(primitive, offset, count)
	
		현재 설정된 program, VBO, VAO로 그림을 그린다.
		primitive: 그리고자 하는 primitive 타입
		offset: 그리고자 하는 첫 정점의 index
		count




	glDrawElements(primitive, count, type, pointer/offset)

		현재 바인딩된 VAO,VBO, EBO를 바탕으로 그리기
		primitive: 그려낼 기본 primitive 타입
		count: 그리고자 하는 EBO 내 index 개수
		type: index의 데이터형
		pointer/offset: 그리고자 하는 EBO의 첫데이터로부터의 오프셋


2.Refactoring


	*Buffer 클래스

		VBO 혹은 EBO를 가질 수 있음
		
		생성시 정점 데이터 혹은 인덱스 데이터를 제공하면, 해당 데이터를 GPU메모리에 저장한 버퍼 오브젝트 생성

		메모리 해제시 버퍼 오브젝트 제거



	*VertexLayout 클래스

		VAO 생성 및 메모리 해제시 VAO 제거

		vertex attribute 설정 기능 제공


**정리

	opengl을 이용하여 삼각형을 그리는 긴 여정
		shader object 생성/ 소스 컴파일
		program object 생성 / shader link
		VAO: VBO의 구조에 대한 description, 바인딩된 VBO EBO 기억
		VBO: 정점 데이터를 GPU 메모리 상에 위치시킨 object
		EBO: 인덱스 데이터를 GPU 메모리 상에 위치시킨 object






